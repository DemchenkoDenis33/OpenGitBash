{
	"info": {
		"_postman_id": "84209a1c-1752-49ba-af91-25608b12f256",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20811796"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_data.name\r",
							"let resp_name = jsonData.name\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"     pm.expect(resp_name).to.eql(req_name);\r",
							"  \r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req_data.age\r",
							"let resp_age = jsonData.age\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"     pm.expect(resp_age).to.eql(req_age);\r",
							"  \r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req_data.salary\r",
							"let resp_salary = String(jsonData.salary)\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"     pm.expect(resp_salary).to.eql(req_salary);\r",
							"    \r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"\r",
							"console.log(\"response_family - \", family )\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"let resp_dog = jsonData.family.pets.dog\r",
							"let resp_name_dog = jsonData.family.pets.dog.name\r",
							"\r",
							"pm.test(\"dog_name\", function () {\r",
							"     pm.expect(JSON.stringify(resp_dog)).to.include(\"name\");\r",
							" \r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"let resp_age_dog = jsonData.family.pets.dog.age\r",
							"\r",
							"pm.test(\"dog_age\", function () {\r",
							"     pm.expect(JSON.stringify(resp_dog)).to.include(\"age\");\r",
							" \r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog_name_Luky\", function () {\r",
							"     pm.expect(resp_name_dog).to.eql(\"Luky\");\r",
							" \r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_age_4\", function () {\r",
							"     pm.expect(resp_age_dog).to.eql(4);\r",
							" \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_data.name\r",
							"let resp_name = jsonData.name\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"     pm.expect(resp_name).to.eql(req_name);\r",
							"  \r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req_data.req_age\r",
							"let resp_age = jsonData.req_age\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    \r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = req_data.salary\r",
							"console.log(\"request_salary - \", req_salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = jsonData.salary\r",
							"console.log(\"responce_salary - \", resp_salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"responce_salary_0 - \", resp_salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"responce_salary_1 - \", resp_salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"responce_salary_2 - \", resp_salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_request_0\", function () {\r",
							"    //  pm.expect(String(req_salary[0])).to.eql(req_salary);\r",
							"    //  pm.expect(req_salary[0]).to.eql(req_salary);\r",
							"    //  pm.expect(resp_salary[0]).to.eql(req_salary);\r",
							"      pm.expect(String(resp_salary[0])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_request_1\", function () {\r",
							"      pm.expect(String(resp_salary[1])).to.eql(String(req_salary*2));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_request_2\", function () {\r",
							"      pm.expect(String(resp_salary[2])).to.eql(String(req_salary*3));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.get(\"age\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.get(\"name\", \"Denys\");\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.get(\"age\", 33);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.get(\"salary\", 1000);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"    for (let i = 0; i<3; i++) {\r",
							"    // for (let i = 0; i<jsonData.salary.lenght; i++) {\r",
							"        console.log(jsonData.salary[i] )\r",
							"    }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name = jsonData.name\r",
							"pm.test(\"name\", function () { \r",
							"    pm.expect(jsonData.name).to.eql(name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age = jsonData.age\r",
							"pm.test(\"age\", function () {  \r",
							"    pm.expect(jsonData.age).to.eql(age);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary = jsonData.salary\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(jsonData.family)\r",
							"console.log(\"response_family - \", family )\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let u_salary_1_5_year = req.salary * 4;\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.set(\"salary\", 1000);\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.set(\"age\", 33);\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.set(\"name\", \"Denus\");\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"let req_salary = req.salary\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"let start_salary = jsonData.start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    \r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"let salary_6_months = jsonData.qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    \r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"let salary_12_months = jsonData.qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"let salary_18_months = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    \r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"let salary_42_months = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    \r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"// let resp_person = String(jsonData.person)\r",
							"let resp_person = jsonData.person\r",
							"pm.test(\"person\", function () {\r",
							"     pm.expect(JSON.stringify(jsonData)).to.include(\"person\");\r",
							" \r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary from request\", function () {\r",
							"     pm.expect(String(start_salary)).to.eql(req_salary);\r",
							" \r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 from request\", function () {\r",
							"    \r",
							"        pm.expect(salary_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\" qa_salary_after_12_months = salary*2.7 from request\", function () {\r",
							"    \r",
							"        pm.expect(salary_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\" qa_salary_after_1.5_year = salary*3.3 from request\", function () {\r",
							"    \r",
							"        pm.expect(salary_18_months).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\" qa_salary_after_3.5_year = salary*3.8 from request\", function () {\r",
							"    \r",
							"        pm.expect(salary_42_months).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let u_name = jsonData.person.u_name\r",
							"pm.test(\"1st element from u_name = salary from request\", function () {\r",
							"      pm.expect(String(u_name[1])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let u_age = jsonData.person.u_age\r",
							"let req_age = req.age\r",
							"pm.test(\"parameter u_age = age from request\", function () {\r",
							"      pm.expect(String(u_age)).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let salary_5_years = jsonData.person.u_salary_5_years;\r",
							"pm.test(\"qa_salary_5_year = salary*4.2 from request\", function () {\r",
							"    \r",
							"        pm.expect(salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" for (let i = 0; i<3; i++) {\r",
							"    //  for (let i = 0; i<jsonData.person.lenght; i++) {\r",
							"         if (i==0){\r",
							"             console.log(jsonData.person.u_age)\r",
							"         }else if  (i==1){\r",
							"             console.log(jsonData.person.u_name)\r",
							"         }else \r",
							"            console.log(String(jsonData.person.u_salary_5_years ))\r",
							"     }          \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}